['<?xml version="1.0"?>\n<project name="imp" default="all">\n\n\t<loadfile file="version.txt" property="version.txt" />\n\t<property name="imp.version" value="${string::trim(version.txt)}" />\n\n\t<!-- freeze AssemblyVersion to avoid backwards compatibility issues -->\n\t<property name="imp.assembly.version" value="2.0.9.5" />\n\n\t<property name="debug" value="true" />\n\t<property name="optimize" value="false" />\n\t<property name="verbose" value="false" />\n\t<property name="defines" value="" unless="${property::exists(\'defines\')}" />\n\n\t<property name="mono" value="${\'mono\' == framework::get-family(framework::get-runtime-framework())}" />\n\t<property name="mono-framework-dir" value="${framework::get-framework-directory(framework::get-target-framework())}\\..\\..\\.." if="${mono}" />\n\t<property name="mono-bin-dir" value="${mono-framework-dir}\x08in" if="${mono}" />\n\n\t<property name="java" value="java" />\n\t<property name="antlr.jar" value="lib/antlr-2.7.5/antlr-2.7.5.jar" />\n\t<property name="antlr.trace" value="False" />\n\n\t<property name="ngen.exe" value="${framework::get-framework-directory(framework::get-target-framework())}/ngen.exe" />\n\t<property name="skip.ngen" value="True" />\n\t<property name="skip.antlr" value="False" />\n\t<property name="skip.ast" value="False" />\n\t<property name="skip.vs" value="False" />\n\t<property name="skip.errorpatterns" value="False" />\n\n\t<property name="gsv.name" value="gtksourceview-1.0" />\n\n\t<property name="build.dir" value="build" dynamic="True"/>\n\t<property name="distrobuild.dir" value="distrobuild"/>\n\t<property name="docs.dir" value="docs" />\n\t<property name="examples.dir" value="examples" />\n\n\t<property name="install.prefix" value="/usr/local" />\n\t<property name="install.destdir" value="/" />\n\n\t<property name="install.share" value="${path::combine(install.prefix,\'share\')}" />\n\t<property name="install.bindir" value="${path::combine(install.prefix,\'bin\')}" />\n\t<property name="install.libdir" value="${path::combine(install.prefix,\'lib\')}" />\n\t<property name="install.docsdir" value="${path::combine(install.prefix, docs.dir)}" />\n\t<property name="install.examplesdir" value="${path::combine(install.prefix, examples.dir)}" />\n\t<property name="install.implib" value="${path::combine(install.libdir,\'imp\')}" />\n\t<property name="install.impdocs" value="${path::combine(install.docsdir,\'imp\')}" />\n\t<property name="install.impexamples" value="${path::combine(install.examplesdir,\'imp\')}" />\n\n\t<property name="fakeroot" value="${install.destdir}" />\n\t<property name="fakeroot.implib" value="${install.destdir}/${install.implib}" />\n\t<property name="fakeroot.impdocs" value="${install.destdir}/${install.impdocs}" />\n\t<property name="fakeroot.impexamples" value="${install.destdir}/${install.impexamples}" />\n\t<property name="fakeroot.bindir" value="${install.destdir}/${install.bindir}" />\n\t<property name="fakeroot.libdir" value="${install.destdir}/${install.libdir}" />\n\t<property name="fakeroot.share" value="${install.destdir}/${install.share}" />\n\n\t<!-- set gendarme.dir in your build.properties to enable Gendarme report after build -->\n\t<property name="gendarme.dir" value=""/>\n\t<!-- set gendarme.set to \'imp\' to get only Gendarme.Rules.', ' defects -->\n\t<property name="gendarme.set" value=""/>\n\n\t<include buildfile="build.properties" if="${file::exists(\'build.properties\')}" />\n\n\t<property name="imp.distro.name" value="imp-${imp.version}" />\n\n\t<property name="supported.runtimes.net-1.1" value="&lt;supportedRuntime version=&quot;v1.1.4322&quot;/&gt;\n&lt;supportedRuntime version=&quot;v2.0.50727&quot;/&gt;" />\n\n\t<property name="supported.runtimes.net-2.0"\n\t\tvalue="&lt;supportedRuntime version=&quot;v2.0.50727&quot;/&gt;\n&lt;supportedRuntime version=&quot;v1.1.4322&quot;/&gt;" />\n\n\t<property name="supported.runtimes.net-4.0"\n\t\tvalue="&lt;supportedRuntime version=&quot;v4.0.30319&quot;/&gt;\n&lt;supportedRuntime version=&quot;v2.0.50727&quot;/&gt;\n&lt;supportedRuntime version=&quot;v1.1.4322&quot;/&gt;" />\n\n\t<property name="net40" value="${version::get-major(framework::get-version(framework::get-target-framework())) &gt;= 4}" />\n\n\t<!-- Tests whether the target .NET platform is 4.0 or not -->\n\t<if test="${net40}">\n\t\t<property name="supported.runtimes" value="${supported.runtimes.net-4.0}" />\n\t\t<property name="csc.4.define" value="NET_4_0;" />\n\t</if>\n\n\t<if test="${not net40}">\n\t\t<property name="supported.runtimes" value="${supported.runtimes.net-2.0}" />\n\t\t<property name="csc.4.define" value="" />\n\t</if>\n\n\t<property name="csc.noconfig" value="false" />\n\t<property name="csc.define.custom" value="NO_CUSTOM_DEFINE" unless="${property::exists(\'csc.define.custom\')}" />\n\t<property name="csc.define" value="${csc.4.define}NET_2_0;TRACE;DEBUG;${csc.define.custom}" />\n\n\t<property name="fixture" value="" dynamic="true" />\n\n\t<property name="nosign" value="false" />\n\n\t<property name="nant-csc-keyfile-bug" value="${version::get-minor(assemblyname::get-version(assembly::get-name(nant::get-assembly()))) &lt; 86}" />\n\n\t<target name="sign">\n\t\t<property name="keyfile.path" value="src/imp.snk" overwrite="false" />\n\t</target>\n\n\t<target name="nosign">\n\t\t<property name="keyfile.path" value="" overwrite="false" />\n\t\t<property name="nosign" value="true" overwrite="true" />\n\t</target>\n\n\t<target name="all" depends="impc, impi, impish, imp-pkgconfig, ', '.Lang.CodeDom, ', '.Lang.Useful, ', '.Microsoft.Build.Tasks, update-vs-env, ', '.Lang.PatternMatching">\n\t\t<call target="gendarme" if="${gendarme.dir != \'\'}" />\n\t\t<call target="verify-assemblies" />\n\t</target>\n\n\t<target name="verify-assemblies" if="${mono}">\n\t\t<foreach item="File" property="filename">\n\t\t<in>\n\t\t\t<items>\n\t\t\t\t<include name="${build.dir}/', '.Lang*.dll" />\n\t\t\t</items>\n\t\t</in>\n\t\t<do>\n\t\t\t<exec program="${mono-bin-dir}/pedump" workingdir="${build.dir}">\n\t\t\t\t<environment>\n\t\t\t\t\t<variable name="MONO_PATH" path="${build.dir}" />\n\t\t\t\t</environment>\n\t\t\t\t<arg line="--verify code" />\n\t\t\t\t<arg value="${path::get-file-name(filename)}" />\n\t\t\t</exec>\n\t\t</do>\n\t\t</foreach>\n\t</target>\n\n\t<target name="set-release-configuration">\n\t\t<property name="debug" value="false" />\n\t\t<property name="optimize" value="true" />\n\t\t<property name="csc.define" value="NET_2_0;${csc.define.custom}" />\n\t</target>\n\n\t<target name="nostdlib">\n\t\t<property name="csc.define" value="${csc.define};NO_SYSTEM_DLL" />\n\t\t<property name="csc.noconfig" value="true" />\n\t</target>\n\n\t<target name="test" depends="all">\n\t\t<exec\n\t\t\tbasedir="${nant::get-base-directory()}"\n\t\t\tprogram="NAnt.exe"\n\t\t\tworkingdir="tests"\n\t\t\tuseruntimeengine="true">\n\t\t\t<arg value="-t:${framework::get-target-framework()}" />\n\t\t\t<arg value="-D:fixture=${fixture}" if="${fixture != \'\'}" />\n\t\t\t<arg value="run" />\n\t\t</exec>\n\t</target>\n\n\t<target name="test-vs-bin">\n\t\t<exec\n\t\t\tbasedir="${nant::get-base-directory()}"\n\t\t\tprogram="NAnt.exe"\n\t\t\tworkingdir="tests"\n\t\t\tuseruntimeengine="true">\n\t\t\t<arg value="-D:fixture=${fixture}" if="${fixture != \'\'}" />\n\t\t\t<arg value="run-vs-bin" />\n\t\t</exec>\n\t</target>\n\n\t<target name="compile-tests" depends="all">\n\t\t<exec\n\t\t\tbasedir="${nant::get-base-directory()}"\n\t\t\tprogram="NAnt.exe"\n\t\t\tworkingdir="tests"\n\t\t\tuseruntimeengine="true">\n\t\t\t<arg value="-D:fixture=${fixture}" if="${fixture != \'\'}" />\n\t\t\t<arg value="compile" />\n\t\t</exec>\n\t</target>\n\n\t<target name="impish" depends="', '.Lang.Interpreter">\n\t\t<impc\n\t\t\ttarget="exe"\n\t\t\toutput="${build.dir}/impish.exe"\n\t\t\tverbose="${verbose}"\n\t\t\tdebug="${debug}"\n\t\t\tdefine="${defines}">\n\n\t\t\t<sources basedir="src/impish">\n\t\t\t\t<include name="*.imp" />\n\t\t\t</sources>\n\n\t\t\t<references basedir="${build.dir}">\n\t\t\t\t<include name="', '.Lang.Interpreter.dll" />\n\t\t\t\t<include name="', '.Lang.Compiler.dll" />\n\t\t\t</references>\n\t\t\t<arg line="-keyfile:${keyfile.path}" unless="${keyfile.path == \'\'}" />\n\t\t</impc>\n\n\t\t<copy file="extras/template.config.in" tofile="${build.dir}/impish.exe.config">\n\t\t\t<filterchain>\n\t\t\t\t<replacestring from="@SUPPORTEDVERSIONS@"\n\t\t\t\t\tto="${supported.runtimes}" />\n\t\t\t</filterchain>\n\t\t</copy>\n\n\t\t<if test="${not(platform::is-windows())}">\n\t\t\t<copy file="extras/impish.in" tofile="${build.dir}/impish" inputencoding="ASCII">\n\t\t\t\t<filterchain>\n\t\t\t\t\t<replacestring from="@RUNTIME@" to="mono" />\n\t\t\t\t\t<replacestring from="@prefix@" to="${install.prefix}" />\n\t\t\t\t\t<replacestring from="@libdir@" to="${install.libdir}" />\n\t\t\t\t</filterchain>\n\t\t\t</copy>\n\t\t</if>\n\t</target>\n\n\t<target name="impi" depends="core, ', '.Lang.Useful, ', '.Lang.Parser">\n\t\t<impc\n\t\t\ttarget="exe"\n\t\t\toutput="${build.dir}/impi.exe"\n\t\t\tverbose="${verbose}"\n\t\t\tdebug="${debug}"\n\t\t\tdefine="${defines}">\n\n\t\t\t<references basedir="${build.dir}">\n\t\t\t\t<include name="', '.Lang.Parser.dll" />\n\t\t\t\t<include name="', '.Lang.Compiler.dll" />\n\t\t\t\t<include name="', '.Lang.Useful.dll" />\n\t\t\t</references>\n\n\t\t\t<sources basedir="src/impi">\n\t\t\t\t<include name="*.imp" />\n\t\t\t</sources>\n\t\t\t<arg line="-keyfile:${keyfile.path}" unless="${keyfile.path == \'\'}" />\n\t\t</impc>\n\n\t\t<copy file="extras/template.config.in" tofile="${build.dir}/impi.exe.config">\n\t\t\t<filterchain>\n\t\t\t\t<replacestring from="@SUPPORTEDVERSIONS@"\n\t\t\t\t\tto="${supported.runtimes}" />\n\t\t\t</filterchain>\n\t\t</copy>\n\n\t\t<if test="${not(platform::is-windows())}">\n\t\t\t<copy file="extras/impi.in" tofile="${build.dir}/impi" inputencoding="ASCII">\n\t\t\t\t<filterchain>\n\t\t\t\t\t<replacestring from="@RUNTIME@" to="mono" />\n\t\t\t\t\t<replacestring from="@prefix@" to="${install.prefix}" />\n\t\t\t\t\t<replacestring from="@libdir@" to="${install.libdir}" />\n\t\t\t\t</filterchain>\n\t\t\t</copy>\n\t\t</if>\n\n\t\t<imp>\n\t\tprint("Hello from imp task!")\n\t\tprint("Framework directory: ${Project.TargetFramework.FrameworkAssemblyDirectory}")\n\t\t</imp>\n\n\t</target>\n\n\t<target name="dump-properties" depends="core">\n\t\t<imp>\n\t\tfor p as System.Collections.DictionaryEntry in Project.Properties:\n\t\t\tprint("${p.Key}: ${p.Value}")\n\t\t</imp>\n\t</target>\n\n\t<target name="', '.Lang.PatternMatching" depends="core">\n\n\t\t<impc target="library" output="${build.dir}/', '.Lang.PatternMatching.dll">\n\t\t\t<sources basedir="src/', '.Lang.PatternMatching">\n\t\t\t\t<include name="**/*.imp" />\n\t\t\t</sources>\n\t\t\t<arg line="-keyfile:${keyfile.path}" unless="${keyfile.path == \'\'}" />\n\t\t</impc>\n\n\t</target>\n\n\t<target name="', '.Lang.Interpreter" depends="', '.Lang.PatternMatching, core">\n\t\t<impc target="library"\n\t\t      output="${build.dir}/', '.Lang.Interpreter.dll"\n\t\t      verbose="${verbose}"\n\t\t      debug="${debug}"\n\t\t      define="${defines}">\n\t\t\t<sources basedir="src/', '.Lang.Interpreter">\n\t\t\t\t<include name="**/*.imp" />\n\t\t\t</sources>\n\t\t\t<references basedir="${build.dir}">\n\t\t\t\t<include name="', '.Lang.Compiler.dll" />\n\t\t\t\t<include name="', '.Lang.PatternMatching.dll" />\n\t\t\t</references>\n\t\t\t<arg line="-keyfile:${keyfile.path}" unless="${keyfile.path == \'\'}" />\n\t\t</impc>\n\t</target>\n\n\t<target name="', '.NAnt.Tasks" depends="impc">\n\t\t<uptodate property="', '.NAnt.Tasks-is-uptodate">\n\t\t\t<sourcefiles basedir="src/', '.NAnt.Tasks">\n\t\t\t\t<include name="*.imp" />\n\t\t\t</sourcefiles>\n\t\t\t<targetfiles>\n\t\t\t\t<include name="${build.dir}/', '.NAnt.Tasks.dll" />\n\t\t\t</targetfiles>\n\t\t</uptodate>\n\n\t\t<if test="${debug}">\n\t\t\t<property name="debugflag" value="-debug"/>\n\t\t</if>\n\t\t<if test="${not debug}">\n\t\t\t<property name="debugflag" value="-debug-"/>\n\t\t</if>\n\n\t\t<exec program="${build.dir}/impc.exe" useruntimeengine="true" unless="${', '.NAnt.Tasks-is-uptodate}">\n\t\t\t<arg value="-v" />\n\t\t\t<arg value="-noconfig" />\n\t\t\t<arg value="${debugflag}" />\n\t\t\t<arg value="-out:${build.dir}/', '.NAnt.Tasks.dll" />\n\t\t\t<arg value="-target:library" />\n\t\t\t<arg value="-r:NAnt.Core.dll" />\n\t\t\t<arg value="-r:NAnt.DotNetTasks.dll" />\n\t\t\t<arg value="-srcdir:src/', '.NAnt.Tasks" />\n\t\t\t<arg line=\'"-lib:${nant::get-base-directory()}"\' />\n\t\t</exec>\n\n\t\t<loadtasks assembly="${build.dir}/', '.NAnt.Tasks.dll" />\n\t</target>\n\n\t<target name="impc" depends="corecs">\n\t\t<csc target="exe"\n\t\t\t\toutput="${build.dir}/impc.exe"\n\t\t\t\tdebug="${debug}"\n\t\t\t\toptimize="${optimize}"\n\t\t\t\tdefine="${csc.define}">\n\t\t\t<sources basedir="src/impc">\n\t\t\t\t<include name="*.cs" />\n\t\t\t</sources>\n\n\t\t\t<references>\n\t\t\t\t<include name="${build.dir}/', '.Lang.dll" />\n\t\t\t\t<include name="${build.dir}/', '.Lang.Compiler.dll" />\n\t\t\t\t<include name="${build.dir}/', '.Lang.Parser.dll" />\n\t\t\t</references>\n\t\t\t<arg line="/keyfile:${keyfile.path}" unless="${keyfile.path == \'\'}" />\n\t\t</csc>\n\n\t\t<if test="${not(platform::is-windows())}">\n\t\t\t<copy file="extras/impc.in" tofile="${build.dir}/impc" inputencoding="ASCII">\n\t\t\t\t<filterchain>\n\t\t\t\t\t<replacestring from="@RUNTIME@" to="mono" />\n\t\t\t\t\t<replacestring from="@prefix@" to="${install.prefix}" />\n\t\t\t\t\t<replacestring from="@libdir@" to="${install.libdir}" />\n\t\t\t\t</filterchain>\n\t\t\t</copy>\n\t\t</if>\n\n\t\t<copy todir="${build.dir}" file="src/impc/impc.rsp" />\n\n\t\t<copy file="extras/template.config.in" tofile="${build.dir}/impc.exe.config">\n\t\t\t<filterchain>\n\t\t\t\t<replacestring from="@SUPPORTEDVERSIONS@"\n\t\t\t\t\tto="${supported.runtimes}" />\n\t\t\t</filterchain>\n\t\t</copy>\n\n\t\t<exec program=\'${ngen.exe}\' if="${file::exists(ngen.exe)}" unless="${skip.ngen}">\n\t\t\t<arg file=\'${build.dir}/', ".Lang.dll' />\n\t\t\t<arg file='${build.dir}/", ".Lang.Compiler.dll' />\n\t\t\t<arg file='${build.dir}/", ".Lang.Extensions.dll' />\n\t\t\t<arg file='${build.dir}/", '.Lang.Parser.dll\' />\n\t\t\t<arg file=\'${build.dir}/impc.exe\' />\n\t\t</exec>\n\t</target>\n\n\t<target name="corecs" depends="', '.Lang, ', '.Lang.Compiler, ', '.Lang.Parser">\n\t</target>\n\n\t<target name="core" depends="corecs, ', '.Lang.Extensions, ', '.NAnt.Tasks" />\n\n\t<target name="update-bin" depends="all">\n\t\t<mkdir dir="bin" />\n\t\t<delete>\n\t\t\t<fileset basedir="bin">\n\t\t\t\t<include name="*.Tasks.dll" />\n\t\t\t\t<include name="*.targets" />\n\t\t\t\t<include name="*.config" />\n\t\t\t\t<include name="*.exe" />\n\t\t\t</fileset>\n\t\t</delete>\n\t\t<copy todir="bin">\n\t\t\t<fileset basedir="${build.dir}">\n\t\t\t\t<include name="', '.*.dll" />\n\t\t\t\t<include name="imp*.exe" />\n\t\t\t\t<include name="imp*.rsp" />\n\t\t\t\t<include name="*.config" />\n\t\t\t\t<include name="*.targets" />\n\t\t\t</fileset>\n\t\t</copy>\n\t</target>\n\n\t<target name="', '.Microsoft.Build.Tasks" depends="core">\n\t\t<impc target="library"\n\t\t\toutput="${build.dir}/', '.Microsoft.Build.Tasks.dll"\n\t\t\tfailonerror="true"\n\t\t\tverbose="${verbose}"\n\t\t\tdebug="${debug}"\n\t\t\tdefine="${defines}">\n\t\t\t<sources basedir="src/', '.Microsoft.Build.Tasks">\n\t\t\t\t<include name="**/*.imp" />\n\t\t\t</sources>\n\t\t\t<references basedir="${build.dir}">\n\t\t\t\t<include name="Microsoft.Build.Utilities.dll" />\n\t\t\t\t<include name="Microsoft.Build.Framework.dll" />\n\t\t\t\t<include name="Microsoft.Build.Tasks.dll" />\n\t\t\t</references>\n\t\t\t<arg line="-keyfile:${keyfile.path}" unless="${keyfile.path == \'\'}" />\n\t\t</impc>\n\t\t<copy todir="${build.dir}">\n\t\t\t<fileset basedir="src/', '.Microsoft.Build.Tasks">\n\t\t\t\t<include name="', '.Microsoft.Build.targets" />\n\t\t\t</fileset>\n\t\t</copy>\n\t</target>\n\n\t<target name="', '.Lang.Useful" depends="core">\n\t\t<uptodate property="useful-grammars-uptodate">\n\t\t\t<sourcefiles basedir="src/', '.Lang.Useful">\n\t\t\t\t<include name="**/*.g" />\n\t\t\t</sourcefiles>\n\t\t\t<targetfiles basedir="src/', '.Lang.Useful">\n\t\t\t\t<include name="**/*Lexer.imp" />\n\t\t\t</targetfiles>\n\t\t</uptodate>\n\n\t\t<if test="${not useful-grammars-uptodate and not skip.antlr}">\n\t\t\t<exec program="${java}" failonerror="true">\n\t\t\t\t<arg value="-cp" />\n\t\t\t\t<arg file="${antlr.jar}" />\n\t\t\t\t<arg value="antlr.Tool" />\n\t\t\t\t<arg value="-o" />\n\t\t\t\t<arg value="src/', '.Lang.Useful/IO/Impl" />\n\t\t\t\t<arg value="src/', '.Lang.Useful/IO/PreProcessorExpressions.g" />\n\t\t\t</exec>\n\t\t</if>\n\n\t\t<impc target="library"\n\t\t\toutput="${build.dir}/', '.Lang.Useful.dll"\n\t\t\tverbose="${verbose}"\n\t\t\tdebug="${debug}"\n\t\t\tdefine="${defines}">\n\t\t\t<nowarn>\n\t\t\t\t<warning number="BCW0016"/> <!-- unused namespaces in generated stuff -->\n\t\t\t</nowarn>\n\t\t\t<sources basedir="src/', '.Lang.Useful">\n\t\t\t\t<include name="**/*.imp" />\n\t\t\t</sources>\n\t\t\t<references basedir="${build.dir}">\n\t\t\t\t<include name="', '.Lang.Parser.dll" />\n\t\t\t\t<include name="', '.Lang.Compiler.dll" />\n\t\t\t</references>\n\t\t\t<arg line="-keyfile:${keyfile.path}" unless="${keyfile.path == \'\'}" />\n\t\t</impc>\n\t</target>\n\n\t<target name="', '.Lang.CodeDom" depends="core">\n\t\t<impc target="library"\n\t\t\toutput="${build.dir}/', '.Lang.CodeDom.dll"\n\t\t\tverbose="${verbose}"\n\t\t\tdebug="${debug}"\n\t\t\tdefine="${defines}">\n\t\t\t<sources basedir="src/', '.Lang.CodeDom">\n\t\t\t\t<include name="**/*.imp" />\n\t\t\t</sources>\n\t\t\t<references basedir="${build.dir}">\n\t\t\t<!--\n\t\t\t\t<include name="System.Data.dll" />\n\t\t\t\t<include name="System.Xml.dll" />\n\t\t\t-->\n\t\t\t\t<include name="', '.Lang.Compiler.dll" />\n\t\t\t</references>\n\t\t\t<arg line="-keyfile:${keyfile.path}" unless="${keyfile.path == \'\'}" />\n\t\t</impc>\n\t</target>\n\n\t<target name="', '.Lang.Extensions" depends="corecs, ', '.NAnt.Tasks">\n\t\t<impc target="library"\n\t\t\toutput="${build.dir}/', '.Lang.Extensions.dll"\n\t\t\tfailonerror="true"\n\t\t\tnostdlib="true"\n\t\t\tverbose="${verbose}"\n\t\t\tdebug="${debug}"\n\t\t\tdefine="${defines}">\n\t\t\t<sources basedir="src/', '.Lang.Extensions">\n\t\t\t\t<include name="**/*.imp" />\n\t\t\t</sources>\n\t\t\t<references basedir="${build.dir}">\n\t\t\t\t<include name="', '.Lang.dll" />\n\t\t\t\t<include name="', '.Lang.Compiler.dll" />\n\t\t\t\t<include name="System.dll" />\n\t\t\t\t<include name="System.Core.dll" />\n\t\t\t</references>\n\t\t\t<arg line="-keyfile:${keyfile.path}" unless="${keyfile.path == \'\'}" />\n\t\t</impc>\n\t</target>\n\n\n\t<target name="', '.Lang.Compiler" depends="', '.Lang, ', '.Lang.Ast">\n\t\t<csc target="library"\n\t\t\toutput="${build.dir}/', '.Lang.Compiler.dll"\n\t\t\tdebug="${debug}"\n\t\t\toptimize="${optimize}"\n\t\t\tdefine="${csc.define}">\n\n\t\t\t<sources basedir="src/', '.Lang.Compiler">\n\t\t\t\t<include name="**/*.cs" />\n\t\t\t</sources>\n\n\t\t\t<references>\n\t\t\t\t<include name="${build.dir}/', '.Lang.dll" />\n\t\t\t\t<include name="System.Numerics.dll" />\n\t\t\t\t<!--include name="${build.dir}/', '.Lang.Ast.dll" /-->\n\t\t\t</references>\n\t\t\t<arg line="/keyfile:${keyfile.path}" unless="${keyfile.path == \'\'}" />\n\t\t</csc>\n\t</target>\n\n\t<target name="', '.Lang.Ast" depends="', '.Lang, generate-ast">\n\t\t<!--csc\n\t\t\ttarget="library"\n\t\t\toutput="${build.dir}/', '.Lang.Ast.dll"\n\t\t\tdebug="${debug}"\n\t\t\toptimize="${optimize}"\n\t\t\tdefine="${csc.define}">\n\n\t\t\t<sources basedir="src/', '.Lang.Ast">\n\t\t\t\t<include name="**/*.cs" />\n\t\t\t</sources>\n\n\t\t\t<references>\n\t\t\t\t<include name="${build.dir}/', '.Lang.dll" />\n\t\t\t</references>\n\t\t</csc-->\n\t</target>\n\n\t<target name="', '.Lang" depends="init">\n\t\t<csc\n\t\t\ttarget="library"\n\t\t\toutput="${build.dir}/', '.Lang.dll"\n\t\t\tdebug="${debug}"\n\t\t\toptimize="${optimize}"\n\t\t\tdefine="${csc.define}"\n\t\t\tnoconfig="${csc.noconfig}">\n\n\t\t\t<sources basedir="src/', '.Lang">\n\t\t\t\t<include name="**/*.cs" />\n\t\t\t</sources>\n\t\t\t<nowarn>\n\t\t\t\t<warning if="${nant-csc-keyfile-bug}" number="1699"/>\n\t\t\t</nowarn>\n\t\t\t<arg line="/keyfile:${keyfile.path}" unless="${keyfile.path == \'\' or nant-csc-keyfile-bug}" />\n\t\t</csc>\n\t</target>\n\n\t<target name="imp-pkgconfig">\n\t\t<copy file="extras/imp.pc.in" tofile="${build.dir}/imp.pc" if="${not(platform::is-windows())}" inputencoding="ASCII">\n\t\t\t<filterchain>\n\t\t\t\t<replacestring from="@prefix@" to="${install.prefix}" />\n\t\t\t\t<replacestring from="@VERSION@" to="${imp.version}" />\n\t\t\t</filterchain>\n\t\t</copy>\n\t</target>\n\n\t<target name="install" depends="impc, impish, impi">\n\t\t<call target="install-win32" if="${platform::is-windows()}"/>\n\t\t<call target="install-linux" if="${not(platform::is-windows())}"/>\n\t</target>\n\n\t<target name="install-linux" depends="impc, impish, impi">\n\t\t<!--\n\t\tUse pkg-config to find the proper locations for several\n\t\tkey files for mime detection, etc\n\t\t-->\n\n\t\t<property name="sharedmime.prefix" value="${pkg-config::get-variable(\'shared-mime-info\',\'prefix\')}" />\n\t\t<property name="fakeroot.sharedmime" value="${fakeroot}/${sharedmime.prefix}" />\n\t\t<property name="gsv.prefix" value="${pkg-config::get-variable(gsv.name,\'prefix\')}" />\n\t\t<property name="fakeroot.gsv" value="${fakeroot}/${gsv.prefix}" />\n\n\t\t<mkdir dir="${fakeroot.implib}"/>\n\t\t<mkdir dir="${fakeroot.bindir}"/>\n\n\t\t<copy todir="${fakeroot.implib}">\n\t\t\t<fileset basedir="${build.dir}">\n\t\t\t\t<include name="*.exe"/>\n\t\t\t\t<include name="*.rsp"/>\n\t\t\t\t<include name="*.config"/>\n\t\t\t\t<include name="*.targets"/>\n\t\t\t\t<include name="*.Tasks.dll" />\n\t\t\t</fileset>\n\t\t</copy>\n\n\t\t<foreach item="File" property="filename">\n\t\t<in>\n\t\t\t<items>\n\t\t\t\t<include name="${build.dir}/', '.Lang*.dll" />\n\t\t\t</items>\n\t\t</in>\n\t\t<do>\n\t\t\t<exec program="gacutil" useruntimeengine="false" workingdir="${build.dir}">\n\t\t\t\t<arg value="/i" />\n\t\t\t\t<arg value="${path::get-file-name(filename)}" />\n\t\t\t\t<arg value="/package" />\n\t\t\t\t<arg value="imp" />\n\t\t\t\t<arg value="/root" />\n\t\t\t\t<arg value="${fakeroot.libdir}" />\n\t\t\t</exec>\n\t\t</do>\n\t\t</foreach>\n\n\t\t<copy todir="${fakeroot.bindir}">\n\t\t\t<fileset basedir="${build.dir}">\n\t\t\t\t<include name="impc"/>\n\t\t\t\t<include name="impish"/>\n\t\t\t\t<include name="impi"/>\n\t\t\t</fileset>\n\t\t</copy>\n\n\t\t<copy todir="${fakeroot.sharedmime}/share/mime-info">\n\t\t\t<fileset basedir="extras">\n\t\t\t\t<include name="imp.keys" />\n\t\t\t\t<include name="imp.mime" />\n\t\t\t</fileset>\n\t\t</copy>\n\n\t\t<copy file="extras/imp.lang" todir="${fakeroot.gsv}/share/${gsv.name}/language-specs/" />\n\t\t<copy file="${build.dir}/imp.pc" todir="${fakeroot.libdir}/pkgconfig/" />\n\t\t<copy file="extras/imp-mime-info.xml" todir="${fakeroot.sharedmime}/share/mime/packages/" />\n\n\t\t<exec program="chmod" commandline="+x ${fakeroot.bindir}/impc" />\n\t\t<exec program="chmod" commandline="+x ${fakeroot.bindir}/impi" />\n\t\t<exec program="chmod" commandline="+x ${fakeroot.bindir}/impish" />\n\n\t\t<!-- Copy over documentation -->\n\t\t<mkdir dir="${fakeroot.impdocs}"/>\n\n\t\t<copy todir="${fakeroot.impdocs}">\n\t\t\t<fileset basedir="${docs.dir}">\n\t\t\t\t<include name="*.sxw" />\n\t\t\t</fileset>\n\t\t</copy>\n\n\t\t<copy todir="${fakeroot.impdocs}">\n\t\t\t<fileset basedir=".">\n\t\t\t\t<include name="*.txt" />\n\t\t\t</fileset>\n\t\t</copy>\n\n\t\t<!-- Copy over examples -->\n\t\t<mkdir dir="${fakeroot.impexamples}"/>\n\n\t\t<copy todir="${fakeroot.impexamples}">\n\t\t\t<fileset basedir="${examples.dir}">\n\t\t\t\t<include name="**" />\n\t\t\t</fileset>\n\t\t</copy>\n\n\t</target>\n\n\t<target name="install-win32" depends="all">\n\n\t\t<fail unless="${property::exists(\'mono.prefix\')}">\n\t\tPlease set the property \'mono.prefix\' to point to the prefix of your\n\t\tmono installation (example: c:\\dotnet\\mono-1.1.8).\n\t\t</fail>\n\n\t\t<copy todir="${path::combine(mono.prefix, \'lib/imp\')}">\n\t\t\t<fileset basedir="${build.dir}">\n\t\t\t\t<include name="*.exe"/>\n\t\t\t\t<include name="*.rsp"/>\n\t\t\t\t<include name="*.config"/>\n\t\t\t\t<include name="*.targets"/>\n\t\t\t\t<include name="*.Tasks.dll" />\n\t\t\t</fileset>\n\t\t</copy>\n\n\t\t<foreach item="File" property="filename">\n\t\t<in>\n\t\t\t<items>\n\t\t\t\t<include name="${build.dir}/', '.Lang*.dll" />\n\t\t\t</items>\n\t\t</in>\n\t\t<do>\n\t\t\t<exec program="${path::combine(mono.prefix, \'bin/gacutil.bat\')}"\n\t\t\t\tuseruntimeengine="false" workingdir="${build.dir}">\n\t\t\t\t<arg value="/i" />\n\t\t\t\t<arg value="${path::get-file-name(filename)}" />\n\t\t\t\t<arg value="/package" />\n\t\t\t\t<arg value="imp" />\n\t\t\t</exec>\n\t\t</do>\n\t\t</foreach>\n\n\t</target>\n\n\t<target name="uninstall">\n\t\t<call target="uninstall-linux" if="${not(platform::is-windows())}"/>\n\t\t<call target="uninstall-win32" if="${platform::is-windows()}"/>\n\t</target>\n\n\t<target name="uninstall-linux">\n\t\t<!--\n\t\tUse pkg-config to find the proper locations for several\n\t\tkey files for mime detection, etc\n\t\t-->\n\n\t\t<property name="sharedmime.prefix" value="${pkg-config::get-variable(\'shared-mime-info\',\'prefix\')}" />\n\t\t<property name="fakeroot.sharedmime" value="${fakeroot}/${sharedmime.prefix}" />\n\t\t<property name="gsv.prefix" value="${pkg-config::get-variable(gsv.name,\'prefix\')}" />\n\t\t<property name="fakeroot.gsv" value="${fakeroot}/${gsv.prefix}" />\n\n\t\t<foreach item="File" property="filename">\n\t\t<in>\n\t\t\t<items>\n\t\t\t\t<include name="bin/', '.Lang*.dll" />\n\t\t\t</items>\n\t\t</in>\n\t\t<do>\n\t\t\t<exec program="gacutil" useruntimeengine="false">\n\t\t\t\t<arg value="/u" />\n\t\t\t\t<arg value="${path::get-file-name-without-extension(filename)}" />\n\t\t\t\t<arg value="/package" />\n\t\t\t\t<arg value="imp" />\n\t\t\t</exec>\n\t\t</do>\n\t\t</foreach>\n\n\t\t<delete dir="${fakeroot.implib}" />\n\t\t<delete dir="${fakeroot.impdocs}" />\n\t\t<delete dir="${fakeroot.impexamples}" />\n\n\t\t<delete file="${fakeroot.sharedmime}/share/mime-info/imp.keys" />\n\t\t<delete file="${fakeroot.sharedmime}/share/mime-info/imp.mime" />\n\t\t<delete file="${fakeroot.gsv}/share/${gsv.name}/language-specs/imp.lang" />\n\t\t<delete file="${fakeroot.libdir}/pkgconfig/imp.pc" />\n\t\t<delete file="${fakeroot.sharedmime}/share/mime/packages/imp-mime-info.xml" />\n\t\t<delete file="${fakeroot.bindir}/impi" />\n\t\t<delete file="${fakeroot.bindir}/impc" />\n\t\t<delete file="${fakeroot.bindir}/impish" />\n\t</target>\n\n\t<target name="uninstall-win32">\n\t\t<exec program=\'${ngen.exe}\' if="${file::exists(ngen.exe)}" unless="${skip.ngen}">\n\t\t\t<arg value=\'/delete\' />\n\t\t\t<arg value=\'', ".Lang' />\n\t\t\t<arg value='", ".Lang.Compiler' />\n\t\t\t<arg value='", '.Lang.Parser\' />\n\t\t\t<arg file=\'${build.dir}/impc.exe\' />\n\t\t</exec>\n\t</target>\n\n\t<target name="', '.Lang.Parser" depends="', '.Lang.Compiler, compile-grammar, generate-errorpatterns">\n\t\t<csc target="library"\n\t\t\toutput="${build.dir}/', '.Lang.Parser.dll"\n\t\t\tdebug="${debug}"\n\t\t\toptimize="${optimize}"\n\t\t\tdefine="${csc.define}">\n\t\t\t<sources basedir="src/', '.Lang.Parser">\n\t\t\t\t<include name="**/*.cs" />\n\t\t\t</sources>\n\t\t\t<references>\n\t\t\t\t<include name="${build.dir}/', '.Lang.dll" />\n\t\t\t\t<include name="${build.dir}/', '.Lang.Compiler.dll" />\n\t\t\t</references>\n\t\t\t<nowarn>\n\t\t\t\t<warning number="618,219,162" />\n\t\t\t</nowarn>\n\t\t\t<arg line="/keyfile:${keyfile.path}" unless="${keyfile.path == \'\'}" />\n\t\t</csc>\n\t</target>\n\n\t<target name="insert-license" depends="core">\n\t\t<insertLicense license="notice.txt">\n\t\t\t<fileset basedir="src">\n\t\t\t\t<include name="**/*.cs" />\n\t\t\t\t<include name="**/*.imp" />\n\t\t\t\t<exclude name="', '.Lang.Parser/antlr/**" />\n\n\t\t\t</fileset>\n\t\t\t<fileset basedir="examples">\n\t\t\t\t<include name="**/*.imp" />\n\t\t\t</fileset>\n\t\t</insertLicense>\n\t</target>\n\n\t<target name="upload-distro" depends="make-bin-dist">\n\t\t<exec program="scp">\n\t\t\t<arg value="-B" />\n\t\t\t<arg file="${imp.distro.name}-bin.zip" />\n\t\t\t<arg file="${imp.distro.name}-src.zip" />\n\t\t\t<arg file="${imp.distro.name}-bin.tar.bz2" />\n\t\t\t<arg file="${imp.distro.name}-src.tar.bz2" />\n\t\t\t<arg file="${imp.distro.name}.tar.gz" />\n\t\t\t<arg value="${distro-user}@beaver.codehaus.org:/home/projects/imp/dist/distributions/" />\n\t\t</exec>\n\t</target>\n\n\t<target name="distro">\n\t\t<call target="distro-win32" if="${platform::is-windows()}"/>\n\t\t<call target="distro-linux" if="${not(platform::is-windows())}"/>\n\t</target>\n\n\t<!-- Deprecated, now that binaries are built for multiple frameworks. -->\n\t<target name="distro-linux" depends="src-distro">\n\t</target>\n\n\t<!-- meant to be run on Windows with both .net 1.1 and .net 2.0 installed -->\n\t<target name="distro-win32">\n\t\t<fail unless="${nant.platform.win32}">\n\t\tUse the make-bin-dist or install targets instead on non-win32 platforms.\n\t\t</fail>\n\t\t<delete dir="${distrobuild.dir}" if="${directory::exists(distrobuild.dir)}" />\n\t\t<mkdir dir="${distrobuild.dir}"/>\n\n\t\t<!-- We call nant externally so we can target multiple frameworks. -->\n\t\t<exec program="${nant.location}/NAnt.exe">\n\t\t\t<arg value="rebuild-and-update-bin" />\n\t\t\t<arg value="-D:skip.vs=true" />\n\t\t</exec>\n\n\t\t<!-- Here we actually build the zip files. -->\n\t\t<call target="src-distro" />\n\t</target>\n\n\t<target name="rebuild-and-update-bin">\n\t\t<call target="rebuild" />\n\t\t<call target="update-bin" />\n\t</target>\n\n\t<target name="prepare-bin-distro" depends="insert-license">\n\t\t<property name="distro.dir" value="${build.dir}/${imp.distro.name}" />\n\n\t\t<delete dir="${distro.dir}" if="${directory::exists(distro.dir)}" />\n\t\t<mkdir dir="${distro.dir}" />\n\n\t\t<copy todir="${distro.dir}">\n\t\t\t<fileset>\n\t\t\t\t<include name="readme.txt" />\n\t\t\t\t<include name="license.txt" />\n\t\t\t\t<include name="ast.model.imp" />\n\t\t\t\t<include name="docs/**/*.imp" />\n\t\t\t\t<include name="docs/**/*.build" />\n\t\t\t\t<include name="docs/**/*.sxw" />\n\t\t\t\t<include name="bin/**/*.dll" />\n\t\t\t\t<include name="bin/**/*.exe" />\n\t\t\t\t<include name="bin/**/*.rsp" />\n\t\t\t\t<include name="bin/**/*.config" />\n\t\t\t\t<include name="bin/**/*.targets" />\n\n\t\t\t\t<include name="extras/**/*.imp" />\n\t\t\t\t<include name="extras/**/*.cs" />\n\t\t\t\t<include name="extras/**/*.png" />\n\t\t\t\t<include name="extras/**/*.ico" />\n\t\t\t\t<include name="extras/**/*.prjx" />\n\t\t\t\t<include name="extras/**/*.xml" />\n\t\t\t\t<include name="extras/**/*.build" />\n\t\t\t\t<include name="extras/**/*.lang" />\n\t\t\t\t<include name="extras/**/*.keys" />\n\t\t\t\t<include name="extras/**/*.mime" />\n\t\t\t\t<include name="extras/install-gtksourceview-mode" />\n\t\t\t\t<include name="extras/SharpDevelop/**/*.xshd" />\n\t\t\t\t<include name="extras/SharpDevelop/**/*.xft" />\n\t\t\t\t<include name="extras/SharpDevelop/**/*.xpt" />\n\t\t\t\t<include name="extras/SharpDevelop/**/*.txtres" />\n\t\t\t\t<include name="extras/SharpDevelop/**/*.addin" />\n\n\t\t\t\t<include name="examples/**/*.imp" />\n\t\t\t\t<include name="examples/**/*.xml" />\n\t\t\t\t<include name="examples/**/*.aspx" />\n\t\t\t\t<include name="examples/**/*.build" />\n\t\t\t\t<include name="examples/**/*.config" />\n\t\t\t</fileset>\n\t\t</copy>\n\t</target>\n\n\t<target name="bin-distro" depends="prepare-bin-distro">\n\t\t<zip zipfile="${imp.distro.name}-bin.zip" ziplevel="9">\n\t\t\t<fileset basedir="${distro.dir}">\n\t\t\t\t<include name="**" />\n\t\t\t</fileset>\n\t\t</zip>\n\t</target>\n\n\t<target name="prepare-src-distro" depends="bin-distro">\n\t\t<copy todir="${distro.dir}">\n\t\t\t<fileset>\n\t\t\t\t<include name="extras/*.in" />\n\t\t\t\t<include name="default.build" />\n\t\t\t\t<include name="notice.txt" />\n\t\t\t\t<include name="scripts/*.imp" />\n\t\t\t\t<include name="scripts/Templates/*.cs" />\n\t\t\t\t<include name="lib/**/*.jar" />\n\t\t\t\t<include name="configure.in.in" />\n\t\t\t\t<include name="Makefile.am" />\n\t\t\t\t<include name="bin/Makefile.am" />\n\t\t\t\t<include name="extras/Makefile.am" />\n\n\t\t\t\t<include name="${keyfile.path}" />\n\t\t\t\t<include name="src/**/*.cs" />\n\t\t\t\t<include name="src/**/*.imp" />\n\t\t\t\t<include name="src/**/*.rsp" />\n\t\t\t\t<include name="src/**/*.g" />\n\t\t\t\t<include name="src/**/*.prjx" />\n\t\t\t\t<include name="src/**/*.cmbx" />\n\t\t\t\t<include name="src/**/*.targets" />\n\n\t\t\t\t<include name="tests/nunit.inc" />\n\t\t\t\t<include name="tests/test.snk" />\n\t\t\t\t<include name="tests/**/*.imp" />\n\t\t\t\t<include name="tests/**/*.cs" />\n\t\t\t\t<include name="tests/**/*.txt" />\n\t\t\t\t<include name="tests/**/*.build" />\n\t\t\t\t<include name="tests/**/*.prjx" />\n\t\t\t</fileset>\n\t\t</copy>\n\t</target>\n\n\t<target name="src-distro" depends="prepare-src-distro">\n\t\t<zip zipfile="${imp.distro.name}-src.zip" ziplevel="9">\n\t\t\t<fileset basedir="${distro.dir}">\n\t\t\t\t<include name="**" />\n\t\t\t</fileset>\n\t\t</zip>\n\n\t\t<tar destfile="${imp.distro.name}-src.tar.bz2" compression="BZip2">\n\t\t\t<fileset basedir="${build.dir}">\n\t\t\t\t<include name="${imp.distro.name}/**/*"/>\n\t\t\t</fileset>\n\t\t</tar>\n\t</target>\n\n\t<target name="make-bin-dist">\n\t\t<copy file="configure.in.in" tofile="configure.in" inputencoding="ASCII">\n\t\t\t<filterchain>\n\t\t\t\t<replacestring from="VERSION" to="${imp.version}" />\n\t\t\t</filterchain>\n\t\t</copy>\n\n\t\t<!-- Needed to keep automake from freaking -->\n\t\t<touch file="NEWS"/>\n\t\t<touch file="AUTHORS"/>\n\t\t<touch file="ChangeLog"/>\n\t\t<touch file="README"/>\n\n\t\t<!-- "./autogen.sh", effectively -->\n\t\t<exec program="aclocal" useruntimeengine="false" />\n\t\t<exec program="autoconf" useruntimeengine="false" />\n\t\t<exec program="automake" useruntimeengine="false">\n\t\t\t<arg value="--add-missing" />\n\t\t</exec>\n\n\t\t<exec program="./configure" useruntimeengine="false" />\n\n\t\t<exec program="make" useruntimeengine="false">\n\t\t\t<arg value="dist" />\n\t\t</exec>\n\n\t\t<exec program="make" useruntimeengine="false">\n\t\t\t<arg value="distclean" />\n\t\t</exec>\n\n\t\t<!-- Clean up all the crap autotools spits out everywhere -->\n\t\t<delete>\n\t\t\t<fileset>\n\t\t\t\t<include name="NEWS" />\n\t\t\t\t<include name="AUTHORS" />\n\t\t\t\t<include name="ChangeLog" />\n\t\t\t\t<include name="README" />\n\t\t\t\t<include name="COPYING" />\n\t\t\t\t<include name="INSTALL" />\n\t\t\t\t<include name="**/Makefile.in" />\n\t\t\t\t<exclude name="lib/**/*.*" />\n\t\t\t\t<include name="configure" />\n\t\t\t\t<include name="autom4te.cache/*" />\n\t\t\t\t<include name="autom4te.cache" />\n\t\t\t\t<include name="aclocal.m4" />\n\t\t\t\t<include name="install-sh" />\n\t\t\t\t<include name="missing" />\n\t\t\t\t<include name="configure.in" />\n\t\t\t</fileset>\n\t\t</delete>\n\t</target>\n\n\t<target name="compile-grammar" depends="init" unless="${skip.antlr}">\n\n\t\t<uptodate property="parser-is-uptodate">\n\t\t\t<sourcefiles basedir="src/', '.Lang.Parser">\n\t\t\t\t<include name="imp.g" />\n\t\t\t\t<include name="impel.g" />\n\t\t\t</sourcefiles>\n\t\t\t<targetfiles basedir="src/', '.Lang.Parser">\n\t\t\t\t<include name="', 'ParserBase.cs" />\n\t\t\t\t<include name="', 'ExpressionLexer.cs" />\n\t\t\t</targetfiles>\n\t\t</uptodate>\n\n\t\t<if test="${not parser-is-uptodate}">\n\n\t\t\t<delete>\n\t\t\t\t<fileset basedir="src/', '.Lang.Parser">\n\t\t\t\t\t<include name="*TokenTypes.*" />\n\t\t\t\t</fileset>\n\t\t\t</delete>\n\n\t\t\t<property name="antlr.traceParser" value="-traceParser" if="${antlr.trace}" />\n\t\t\t<property name="antlr.traceParser" value="" unless="${antlr.trace}" />\n\t\t\t<exec program="${java}" failonerror="true">\n\t\t\t\t<arg value="-cp" />\n\t\t\t\t<arg file="${antlr.jar}" />\n\t\t\t\t<arg value="antlr.Tool" />\n\t\t\t\t<arg value="${antlr.traceParser}" />\n\t\t\t\t<arg value="-o" />\n\t\t\t\t<arg value="src/', '.Lang.Parser/" />\n\t\t\t\t<arg value="src/', '.Lang.Parser/imp.g" />\n\t\t\t</exec>\n\n\t\t\t<exec program="${java}" failonerror="true">\n\t\t\t\t<arg value="-cp" />\n\t\t\t\t<arg file="${antlr.jar}" />\n\t\t\t\t<arg value="antlr.Tool" />\n\t\t\t\t<arg value="-o" />\n\t\t\t\t<arg value="src/', '.Lang.Parser/" />\n\t\t\t\t<arg value="src/', '.Lang.Parser/impel.g" />\n\t\t\t</exec>\n\n\t\t\t<touch file="src/', '.Lang.Parser/', 'ParserBase.cs" />\n\t\t</if>\n\t</target>\n\n\t<target name="update-vs-env" unless="${skip.vs}">\n\t\t<exec program="bin/impi.exe" failonerror="false" useruntimeengine="true">\n\t\t\t<arg value="scripts/update-vs2005-env.imp" />\n\t\t</exec>\n\t</target>\n\n\t<target name="generate-ast" depends="init" unless="${skip.ast}">\n\n\t\t<uptodate property="ast-is-uptodate">\n\t\t\t<sourcefiles>\n\t\t\t\t<include name="ast.model.imp" />\n\t\t\t\t<include name="scripts/astgen.imp" />\n\t\t\t\t<include name="scripts/Templates/*.cs" />\n\t\t\t</sourcefiles>\n\t\t\t<targetfiles>\n\t\t\t\t<include name="src/Imp.Lang.Compiler/Ast/Impl/CompileUnitImpl.cs" />\n\t\t\t</targetfiles>\n\t\t</uptodate>\n\n\t\t<if test="${not ast-is-uptodate}">\n\t\t\t<delete dir="src/Imp.Lang.Compiler/Ast/Impl"\n\t\t\t\t\tif="${directory::exists(\'src/Imp.Lang.Compiler/Ast/Impl\')}" />\n\t\t\t<mkdir dir="src/', '.Lang.Compiler/Ast/Impl" />\n\t\t\t<exec program="bin/impi.exe" failonerror="false" useruntimeengine="true">\n\t\t\t\t<arg value="scripts/astgen.imp" />\n\t\t\t</exec>\n\t\t</if>\n\t</target>\n\n\t<target name="generate-errorpatterns" depends="init" unless="${skip.errorpatterns}">\n\t\t<uptodate property="errorpatterns-are-uptodate">\n\t\t\t<sourcefiles>\n\t\t\t\t<include name="scripts/error-patterns.imp" />\n\t\t\t\t<include name="src/', '.Lang.Parser/ImpParserBase.cs" />\n\t\t\t</sourcefiles>\n\t\t\t<targetfiles>\n\t\t\t\t<include name="src/', '.Lang.Parser/GeneratedErrorPatterns.cs" />\n\t\t\t</targetfiles>\n\t\t</uptodate>\n\n\t\t<if test="${not file::exists(\'build/impi.exe\')}">\n\t\t\t<echo level="Warning">WARNING: A recent version of ', ' is required!</echo>\n\t\t\t<echo level="Warning">Run again Nant (without clean or rebuild) to actually generate the patterns</echo>\n\t\t\t<property name="errorpatterns-are-uptodate" value="True" />\n\t\t</if>\n\n\t\t<if test="${not errorpatterns-are-uptodate}">\n\t\t\t<delete file="src/Imp.Lang.Parser/GeneratedErrorPatterns.imp"\n\t\t\t\t\tif="${file::exists(\'src/Imp.Lang.Parser/ImpErrorPatterns.imp\')}" />\n\t\t\t<!-- TODO: It needs a more recent version of impi than the one in ./bin -->\n\t\t\t<exec program="build/impi.exe" output="src/Imp.Lang.Parser/GeneratedErrorPatterns.cs" failonerror="true" useruntimeengine="true">\n\t\t\t\t<arg value="scripts/error-patterns.imp" />\n\t\t\t</exec>\n\t\t</if>\n\t</target>\n\n\t<target name="update-sharpdevelop" depends="all">\n\t\t<copy todir="${sharpdevelop.dir}/AddIns/AddIns/BackendBindings/ImpBinding">\n\t\t\t<fileset basedir="${build.dir}">\n\t\t\t\t<include name="*.dll" />\n\t\t\t\t<include name="*.exe" />\n\t\t\t</fileset>\n\t\t</copy>\n\t</target>\n\n\t<target name="update-assembly-attributes" depends="core">\n\t\t<imp>\n\t\timport System.IO\n\n\t\tfname = "src/Imp.Lang/Builtins.cs"\n\t\tbuiltins = File.ReadAllText(fname)\n\n\t\tversion = Project.Properties["imp.version"]\n\t\tnewBuiltins = @/new System.Version\\(".+"\\)/.Replace(builtins, "new System.Version("${version}.0")")\n\t\tif builtins != newBuiltins:\n\t\t\tprint fname\n\t\t\tFile.WriteAllText(fname, newBuiltins)\n\t\t</imp>\n\n    \t\t<updateAssemblyVersion\n\t\t\tversion="${imp.assembly.version}">\n\t\t\t<fileset basedir="src">\n\t\t\t\t<include name="**/AssemblyInfo.cs" />\n\t\t\t\t<include name="**/AssemblyInfo.imp" />\n\t\t\t</fileset>\n\t\t\t<fileset basedir="extras">\n\t\t\t\t<include name="**/AssemblyInfo.imp" />\n\t\t\t</fileset>\n\t\t</updateAssemblyVersion>\n\n\t\t<updateAssemblyVersion\n\t\t\tcopyright="(C) 2107 Imp Language">\n\t\t\t<fileset basedir="src">\n\t\t\t\t<include name="**/AssemblyInfo.cs" />\n\t\t\t\t<include name="**/AssemblyInfo.imp" />\n\t\t\t</fileset>\n\t\t\t<fileset basedir="extras">\n\t\t\t\t<include name="**/AssemblyInfo.imp" />\n\t\t\t\t<exclude name="SharpDevelop/**/*.*" />\n\t\t\t</fileset>\n\t\t</updateAssemblyVersion>\n\t</target>\n\n\t<target name="rebuild" depends="clean">\n\n\t\t<touch file="ast.model.imp" />\n\t\t<touch file="src/Imp.Lang.Parser/imp.g" />\n\t\t<touch file="src/Imp.Lang.Parser/impel.g" />\n\t\t<mkdir dir="${build.dir}" />\n\t\t<call target="all" />\n\t</target>\n\n\t<target name="clean">\n\t\t<delete dir="${build.dir}" failonerror="false" />\n\t</target>\n\n\t<target name="init">\n\t\t<call target="sign" unless="${nosign}" />\n\t\t<!-- This property define is a way to get around the 0.85 NAnt bug regarding signing satelite resource assemblies. -->\n\t\t<property name="csc.define" value="${csc.define};IGNOREKEYFILE" unless="${nant-csc-keyfile-bug and not nosign}" />\n\t\t<mkdir dir="${build.dir}" />\n\t</target>\n\n\t<target name="makedeb" depends="rebuild">\n\t\t<!-- force rebuild to make sure everything\'s ok and wrappers\n\t\t     are sync\'ed with current install.prefix\n\t\t-->\n\t\t<nant buildfile="extras/makedeb.build" />\n\t</target>\n\n\n\t<target name="Gendarme.Rules.Abstract" depends="core">\n\t\t<impc target="library" output="${build.dir}/Gendarme.Rules.Abstract.dll"\n\t\t      strict="true" verbose="${verbose}" debug="${debug}">\n\t\t\t<sources basedir="extras/Gendarme.Rules.Abstract">\n\t\t\t\t<include name="**/*.imp" />\n\t\t\t</sources>\n\t\t\t<references basedir="${gendarme.dir}">\n\t\t\t\t<include name="Gendarme.Framework.dll" />\n\t\t\t\t<include name="Mono.Cecil.dll" />\n\t\t\t</references>\n\t\t</impc>\n\t</target>\n\n\t<target name="Gendarme.Rules.Imp" depends="Gendarme.Rules.Abstract">\n\t\t<impc target="library" output="${build.dir}/Gendarme.Rules.Imp.dll"\n\t\t      strict="true" verbose="${verbose}" debug="${debug}">\n\t\t\t<sources basedir="extras/Gendarme.Rules.Imp">\n\t\t\t\t<include name="**/*.imp" />\n\t\t\t</sources>\n\t\t\t<references basedir="${build.dir}">\n\t\t\t\t<include name="Gendarme.Rules.Abstract.dll" />\n\t\t\t\t<include name="${path::combine(gendarme.dir, \'Gendarme.Framework.dll\')}" />\n\t\t\t</references>\n\t\t</impc>\n\t</target>\n\n\t<target name="gendarme" depends="Gendarme.Rules.Imp">\n\t\t<delete file="${build.dir}/gendarme-report.html" failonerror="false" />\n\t\t<echo>\n\t\t***\n\t\tIn the event of detected defects, a detailed report will be available at:\n\t\tfile://${path::combine(path::get-full-path(build.dir), \'gendarme-report.html\')}\n\t\t***\n\t\t</echo>\n\t\t<exec program="${path::combine(gendarme.dir,\'gendarme.exe\')}"\n\t\t\tuseruntimeengine="true">\n\t\t\t<arg line="--config extras/rules.xml" />\n\t\t\t<arg line="--html ${build.dir}/gendarme-report.html" />\n\t\t\t<arg line="--set ${gendarme.set}" unless="${gendarme.set == \'\'}" />\n\t\t\t<arg line="--ignore extras/gendarme.ignore" />\n\n\t\t\t<arg value="${build.dir}/Imp.Lang.dll" />\n\t\t\t<arg value="${build.dir}/Imp.Lang.Compiler.dll" />\n\t\t</exec>\n\t</target>\n\n</project>']
